[&Project]
Compile &Resource File, masm32\BIN\Bres.bat "{b}"
&Assemble ASM file, masm32\BIN\Assmbl.bat "{b}"
-
&Link OBJ File, masm32\BIN\Lnk.bat "{b}"
As&semble && Link, masm32\BIN\Build.bat "{b}"
&Build All, masm32\BIN\Bldall.bat "{b}"
-
&Makeit.bat,makeit.bat "{b}"
-
Console Link &OBJ File, masm32\BIN\Lnkc.bat "{b}"
&Console Assemble && Link, masm32\BIN\Buildc.bat "{b}"
Console Build &All, masm32\BIN\Bldallc.bat "{b}"
-
&Run Program,"{b}.exe"

[&Tools]
; -----------------------------
; put you resource editor here
; -----------------------------
&Microsoft Image Editor, masm32\BIN\Imagedit.exe
Microsoft &Zoomin Utility, masm32\bin\zoomin.exe
-
&TopGun Wordwrap Editor,{e}topgun.exe
Run Unicode Text Editor,{e}\uniedit.exe
-
Select RGB color,{e}\cpicker.exe
Get Color From Screen,{e}\getcolor.exe
-
&Procedure Browser, masm32\qetb.exe \MASM32\procs
Browse MASM32 &Lib, masm32\qetb.exe \masm32\m32lib
-
Map App &Procedures,{e}procmap.exe {e}qeditor.exe
-
&Hex to Mnemonic, masm32\Mnemonix.exe
&MASM32 Folder, masm32\Shellex.exe \masm32
-
Load Binary File As Hex,{e} masm32\plugins\bin2hex.dll
Save Hex File As Binary,{e} masm32\plugins\hex2bin.dll
-
Righ Trim Block,{e} masm32\plugins\rtrim.dll
-
Block Insert,{e} masm32\plugins\blockp.dll
-
&Dis-assemble EXE file, masm32\BIN\dasm.bat "{b}.exe"
Dis-&assemble DLL, masm32\BIN\Dasmd.bat "{b}.dll"
Format DumpPE Output,{e} masm32\plugins\fdpe.dll
-
&Indent .IF Block,{e} masm32\plugins\Indentb.dll
Swap 32 bit registers,{e} masm32\plugins\regswap.dll
-
Block &C++ Comment,{e} masm32\plugins\cblockc.dll
Block &ASM Comment,{e} masm32\plugins\ablockc.dll

[&Code]
Create New GUI Application,{e} masm32\cg.exe
Create New Console Application,{e} masm32\script\console.qse
Create New &DLL,{e} masm32\script\dll.qse
Create New Library Module,{e} masm32\script\libmod.qse
Create New QE Plugin,{e} masm32\script\plugin.qse
-
Create New Control Subclass, masm32\subclass.exe
Convert Any File To An Object Module,{e} masm32\fda32.exe
-
Create New Jump Table,{e} masm32\tproc.exe
Create New Word List Jump Table,{e} masm32\jtmake.exe
Create New Character Table,{e} masm32\maketbl.exe
Create Mangled Text,{e} masm32\mangle.exe
-
&RC Menu to .IF asm code, \masm32\Mnutoasm.exe
-
Small &Algo Testbed, \masm32\Testbed.qsc
Large Algo Testbed, \masm32\bigtstbd.qsc
-
Dialog &Template, masm32\dlgproc.qsc
Add In &Dialog, masm32\dlgtmplt.qsc
-
Create bld&lib.bat,\masm32\Libbat.qsc
-
Create a Resource Dialog,{e} masm32\script\makedlg.qse
Create a Resizable Window,{e} masm32\script\makewin.qse
-
Fast Insert Dialog Template,{e} masm32\text\blankdlg.txt
Fast Insert Console Template,{e} masm32\text\contemp.txt

[Conversions]
Text to DW UNICODE, masm32multitool.exe 1
Text to API UNICODE, masm32multitool.exe 2
-
Text to DATA,{e} masm32\multitool.exe 3
Text to Compacted DB Format,{e} masm32\multitool.exe 4
Text to HEX Format,{e} masm32\multitool.exe 5
-
Binary to Compacted DB Format,{e} masm32\bin2dbex.exe 1
Binary to HEX DB Format,{e} masm32\bin2dbex.exe 2

[Scr&ipt]
Convert Text to Script,{e} masm32\plugins\txt2qse.dll
Convert Binary to Script,{e} masm32\plugins\bin2qse.dll
-
Debug MsgBox,{e} masm32\text\dbmsgbox.txt
MessageBox,{e} masm32\text\msgbox.txt
Last Error MessageBox,{e} masm32\text\lasterr.txt
Debug Print,{e} masm32\text\dbprint.txt
-
&Create EXE makeit.bat, masm32\masm32\Bldmakit.qsc
&Create CONSOLE makeit.bat, masm32\masm32\makecon.qsc
Create Sample &RC file,{e} masm32\text\samplerc.txt
Insert MANIFEST XML File,{e} masm32\text\xmlfile.txt
Insert RC Version Control Block,{e} masm32\text\rcversion.txt
-
Insert switch$ Block,{e} masm32\text\switch$.txt
Insert Normal switch Block,{e} masm32\text\switch.txt
-
Insert __UNICODE__ equate,{e} masm32\text\unicode.txt
-
Insert Prologue Code,{e} masm32\text\prolog.txt
Insert Epilogue Code,{e} masm32\text\epilog.txt
-
Push 3 regs,{e} masm32\text\push3.txt
Pop 3 regs,{e} masm32\text\pop3.txt
-
3 nops,{e} masm32\text\nops3.txt
-
Comment&0 «««««,{e} masm32\text\comment0.txt
Comment&1 ¤¤¤¤¤,{e} masm32\text\comment1.txt
Comment&2 ¤=÷=¤,{e} masm32\text\comment2.txt
Comment&3 ÷·÷·÷,{e} masm32\text\comment3.txt
Comment&4 ÷-÷-÷,{e} masm32\text\comment4.txt
Comment&5 ¤*¤*¤,{e} masm32\text\comment5.txt
Comment&6 ¤÷¤÷¤,{e} masm32\text\comment6.txt
Comment&7 -----,{e} masm32\text\comment7.txt
Comment&8 »»»»»,{e} masm32\text\comment8.txt

[Portable modification(v0.6c)]
EXE: Run Program, "{b}.exe"
EXE: Run Program and wait for console intput, ..\..\scripts\runexe__w.bat "{b}"
- 
JVM: Run compiled Java-code, ..\..\scripts\runclassjava.bat "{b}"  
JVM: Run compiled Java-code and wait for console intput, ..\..\scripts\runclassjava__w.bat "{b}"    
JVM: Run compiled Java-code from runnanable jar-file, ..\..\scripts\runjarjava.bat "{b}"  
JVM: Run compiled Java-code from runnanable jar-file and wait for press any key, ..\..\scripts\runjarjava__w.bat "{b}"
Pyton: Run Pyton-code, ..\..\scripts\runpy.bat "{b}"
Pyton: Run Pyton-code and wait for press any key, ..\..\scripts\runpy__w.bat "{b}" 
Pyton: Run compiled Pyton-code, ..\..\scripts\runpyc.bat "{b}" 
Pyton: Run compiled Pyton-code and wait for press any key, ..\..\scripts\runpyc__w.bat "{b}"
;NodeJS(...): Run JavaScript-code by NodeJS and wait for press any key, ..\..\scripts\runnodejs__w.bat "{b}"
NodeJS(v8): Run JavaScript-code by NodeJS, ..\..\scripts\runnodejs_v8.bat "{b}"
NodeJS(v8): Run JavaScript-code by NodeJS and wait for press any key, ..\..\scripts\runnodejs_v8__w.bat "{b}"
NodeJS(v12): Run JavaScript-code by NodeJS, ..\..\scripts\runnodejs_12.bat "{b}"
NodeJS(v12): Run JavaScript-code by NodeJS and wait for press any key, ..\..\scripts\runnodejs_v12__w.bat "{b}"
- 
;NodeJS(...): Compile C/C++ Addons(...) and wait for press any key, ..\..\scripts\asmccpp2nodejsmodule__w.bat "{b}"
;NodeJS(v8): Compile C/C++ Addons(by VS2013 or earlier), ..\..\scripts\asmccpp2nodejsmodule_v8.bat "{b}"
NodeJS(v8): Compile C/C++ Addons(by VS2013 or earlier) and wait for press any key, ..\..\scripts\asmccpp2nodejsmodule_v8__w.bat "{b}"
;NodeJS(v12): Compile C/C++ Addons(by VS2015 or later), ..\..\scripts\asmccpp2nodejsmodule_v12.bat "{b}"
NodeJS(v12): Compile C/C++ Addons(by VS2015 or later) and wait for press any key, ..\..\scripts\asmccpp2nodejsmodule_v12__w.bat "{b}"
- 
;G++: Compile all Asm/C/C++-files(*.prj -> *.exe), ..\..\scripts\cppprj2exe.bat "{b}"
G++: Compile all Asm/C/C++-files(*.prj -> *.exe) and wait for press any key, ..\..\scripts\cppprj2exe__w.bat "{b}"
;G++: Compile C-code(*.cpp -> *.exe), ..\..\scripts\cpp2exe.bat "{b}"
G++: Compile C-code(*.cpp -> *.exe) and wait for press any key, ..\..\scripts\cpp2exe__w.bat "{b}"
;GCC: Convert C-code to gcc-assembly(*.c -> *.s), ..\..\scripts\c2asm.bat "{b}"
GCC: Convert C-code to gcc-assembly(*.c -> *.s) and wait for press any key, ..\..\scripts\c2asm__w.bat "{b}"
;GCC: Compile gcc-assembly to object(*.s -> *.o), ..\..\scripts\asm2obj.bat "{b}"
GCC: Compile gcc-assembly to object(*.s -> *.o) and wait for press any key, ..\..\scripts\asm2obj__w.bat "{b}"
;GCC: Compile gcc-assembly to object(*.s -> *.o) with position-independent code, ..\..\scripts\asm2picobj.bat "{b}"
GCC: Compile gcc-assembly to object(*.s -> *.o) with position-independent code and wait for press any key, ..\..\scripts\asm2picobj__w.bat "{b}"
;GCC: Compile gcc-assembly to shared object(*.s -> *.so), ..\..\scripts\asm2schobj.bat "{b}"
GCC: Compile gcc-assembly to shared object(*.s -> *.so) and wait for press any key, ..\..\scripts\asm2schobj__w.bat "{b}"
;GCC: Compile C-code to shared object(*.c -> *.so), ..\..\scripts\c2schobj.bat "{b}"
GCC: Compile C-code to shared object(*.c -> *.so) and wait for press any key, ..\..\scripts\c2schobj__w.bat "{b}"
- 
DLL(dll): View content in dll-file, ..\..\scripts\viewdllcontent.bat "{b}"
DLL(so):  View content in so-file, ..\..\scripts\viewsocontent.bat "{b}"
-
;NodeJS(...): Prepare to use C/C++Addons-N-API and wait for press any key, ..\..\scripts\nodejspreparenapi__w.bat
;NodeJS(v8): Prepare to use C/C++Addons-N-API, ..\..\scripts\nodejspreparenapi_v8.bat
NodeJS(v8): Prepare to use C/C++Addons-N-API and wait for press any key, ..\..\scripts\nodejspreparenapi_v8__w.bat
;NodeJS(v12): Prepare to use C/C++Addons-N-API, ..\..\scripts\nodejspreparenapi_v12.bat
NodeJS(v12): Prepare to use C/C++Addons-N-API and wait for press any key, ..\..\scripts\nodejspreparenapi_v12__w.bat
-
;MASM32: Console Build &All, masm32\BIN\Bldallc.bat "{b}"
MASM32: Console Build &All and wait for press any key, ..\..\scripts\Bldallc__w.bat "{b}"
-
;Go: Build Go-code(*.go -> *.exe), ..\..\scripts\go2exe.bat "{b}"
Go: Build Go-code(*.go -> *.exe) and wait for press any key, ..\..\scripts\go2exe__w.bat "{b}"
-
;Pyton: Compile Pyton-code(*.py -> *.pyc), ..\..\scripts\py2pyc.bat "{b}"
Pyton: Compile Pyton-code(*.py -> *.pyc) and wait for press any key, ..\..\scripts\py2pyc__w.bat "{b}"
;Pyton: Translate Pyton-code to C-code(*.py -> *.c), ..\..\scripts\py2c.bat "{b}" 
Pyton: Translate Pyton-code to C-code(*.py -> *.c) and wait for press any key, ..\..\scripts\py2c__w.bat "{b}" 
;Pyton: Translate Pyton-code to C++-code(*.py -> *.cpp), ..\..\scripts\py2cpp.bat "{b}" 
Pyton: Translate Pyton-code to C++-code(*.py -> *.cpp), ..\..\scripts\py2cpp__w.bat "{b}"  
- 
;Java: Compile Java-code(*.java -> *.class), ..\..\scripts\java2classjava.bat "{b}"
Java: Compile Java-code(*.java -> *.class) and wait for press any key, ..\..\scripts\java2classjava__w.bat "{b}"
;Java: Create jar-file from compiled Java-code(*.class -> *.jar)(to create runnable jar-file need to define Main-Class in MANIFEST.MF), ..\..\scripts\classjava2jarjava.bat "{b}"
Java: Create jar-file from compiled Java-code(*.class -> *.jar)(to create runnable jar-file need to define Main-Class in MANIFEST.MF) and wait for press any key, ..\..\scripts\classjava2jarjava__w.bat "{b}"
Java: Decompile compiled Java-code(*.class -> *.java) and open in editor, ..\..\scripts\classjavadecompile.bat "{b}"
Java: Decompile compiled Java-code from jar-file(*.jar -> *.java) and open in editor, ..\..\scripts\jarjavadecompile.bat "{b}"
-
;CW: Lexical analysis CWL-code(cwlex *.cwl -> stdout)(use cwlex.exe in this folder), ..\..\scripts\lex4cwl.bat "{b}"
CW: Lexical analysis CWL-code(cwlex *.cwl -> stdout)(use cwlex.exe in this folder) and wait for press any key, ..\..\scripts\lex4cwl__w.bat "{b}"
;CW: Compile CWL-code(*.cwl -> *.exe)(use cw.exe in this folder), ..\..\scripts\cwl2exe.bat "{b}"
CW: Compile CWL-code(*.cwl -> *.exe)(use cw.exe in this folder) and wait for press any key, ..\..\scripts\cwl2exe__w.bat "{b}"
-  
Open VKdebug, masm32\bin\dbgwin.exe
- 
About portable modification(by N. Kozak), masm32\helpp\portable_mod.chm

[help]
Quick Editor Help,{e} masm32\help\qeditor.chm
-
&MASM32 Help,{e} masm32\HELP\masm32.chm
High Level Macro Help,{e} masm32\help\hlhelp.chm
MASM32 &Library Reference,{e} masm32\HELP\Masmlib.chm
MASM32 Dialog Help,{e} masm32\HELP\imdialog.chm
&FPU Lib Help,{e} masm32\HELP\Fpuhelp.chm
Date Time Reference,{e} masm32\HELP\datetime.chm
-
&Opcodes Help,{e} masm32\HELP\Opcodes.chm
&ASM Intro Help,{e} masm32\HELP\Asmintro.chm
-
&VKdebug Help,{e} masm32\help\VKDebug.chm

































